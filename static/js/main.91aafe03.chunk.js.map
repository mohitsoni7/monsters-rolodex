{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","id","email","CardList","monsters","map","SearchBox","placeholder","handleChange","class","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAKaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,eAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,MAAxC,OAA+CL,EAAMI,QAAQE,GAA7D,4BACtB,6BAAKN,EAAMI,QAAQC,OACnB,4BAAIL,EAAMI,QAAQG,YCFbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,eAAf,SAEQD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQE,WCNlDK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,MAAM,aACNC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCmEHI,G,wDArEb,aAAe,IAAD,8BACZ,gBA+BFJ,aAAe,SAACK,GAAQ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA7B5D,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDAoBd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAY/C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAChC,SAAC3B,GAAD,OAAaA,EAAQC,KAAK2B,cAAcC,SAASb,MAKnD,OACE,sBAAKnB,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKhB,eAcrB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAhEVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91aafe03.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\n\nexport const Card = (props) => (\n    <div className='monster-card'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.name}${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\n\nexport const CardList = (props) => (\n    <div className='monster-grid'>\n        {\n            props.monsters.map((monster) => <Card key={monster.id} monster={monster} />)\n        }\n    </div>\n);\n","import React from 'react'\nimport \"./search-box.styles.css\"\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        class=\"search-box\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n\n    // Bind the this with custom function\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  /* Life Cycle Methods\n\n  These are those methods which gets called at different stages when\n  the components get rendered.\n\n  for ex. starting with component i.e. componentDidMount\n\n  */\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { this.setState({ monsters: users }) })\n  }\n\n  // Create Custom function and bind it with class\n  // handleChange(e) {\n  //   this.setState({ searchField: e.target.value });\n  // }\n\n  // Otherwise create an arrow function which automatically binds it to the place where it is defined\n  handleChange = (e) => { this.setState({ searchField: e.target.value }) };\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n      (monster) => monster.name.toLowerCase().includes(searchField)\n    );\n\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        {/* Search Box */}\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        // handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n\n\n        {/*\n        Our Component should be responsible of \n        doing all the things what is supposed to do.\n\n        for ex.\n        App Component shouldn't display cards\n        card-list Component should display just cards\n        Card Component should display card information\n        */}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}